--- a/acinclude.m4	2006-05-05 01:39:01.000000000 +0900
+++ b/acinclude.m4	2019-06-05 18:25:55.860451257 +0900
@@ -550,12 +550,12 @@
 # __builtin_alloca is not available everywhere, check it exists before
 # seeing that it works
 GMP_PROG_CC_WORKS_PART_TEST([$1],[__builtin_alloca availability],
-[int k; int foo () { __builtin_alloca (k); }],
+[int k; void foo () { __builtin_alloca (k); }],
   [GMP_PROG_CC_WORKS_PART([$1], [alloca array],
 [/* The following provokes an internal compiler error from Itanium HP-UX cc
     under +O2 or higher.  We use this sort of code in mpn/generic/mul_fft.c. */
 int k;
-int foo ()
+void foo ()
 {
   int i, **a;
   a = __builtin_alloca (k);
@@ -594,9 +594,9 @@
 typedef unsigned long long t1;typedef t1*t2;
 __inline__ t1 e(t2 rp,t2 up,int n,t1 v0)
 {t1 c,x,r;int i;if(v0){c=1;for(i=1;i<n;i++){x=up[i];r=x+1;rp[i]=r;}}return c;}
-f(){static const struct{t1 n;t1 src[9];t1 want[9];}d[]={{1,{0},{1}},};t1 got[9];int i;
+void f(){static const struct{t1 n;t1 src[9];t1 want[9];}d[]={{1,{0},{1}},};t1 got[9];int i;
 for(i=0;i<1;i++){if(e(got,got,9,d[i].n)==0)h();g(i,d[i].src,d[i].n,got,d[i].want,9);if(d[i].n)h();}}
-h(){}g(){}
+void h(){}void g(){}
 #else
 int dummy;
 #endif
@@ -608,8 +608,8 @@
    1666 to get an ICE with -O1 -mpowerpc64.  */
 
 #ifdef __GNUC__
-f(int u){int i;long long x;x=u?~0:0;if(x)for(i=0;i<9;i++);x&=g();if(x)g();}
-g(){}
+void f(int u){int i;long long x;x=u?~0:0;if(x)for(i=0;i<9;i++);x&=g();if(x)g();}
+void g(){}
 #else
 int dummy;
 #endif

