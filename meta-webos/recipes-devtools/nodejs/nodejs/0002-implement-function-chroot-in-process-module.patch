From deed8c2d21589b28f96e2428b9ec9610f7dd95b2 Mon Sep 17 00:00:00 2001
From: "sungmok.shin" <sungmok.shin@lge.com>
Date: Wed, 15 Jul 2020 14:56:04 +0900
Subject: [PATCH] implement function chroot in process module

:Release Notes:
Implement chroot function in nodejs

:Detailed Notes:
Current implementation of fork server does not support jailer mode
because of lack of native support in nodejs. This change implements
function `chroot' in `process' module in nodejs. As a result, it
becomes possible to implement jailer mode in fork server.

:Testing Performed:
Locally build and tested.

:QA Notes:

:Issues Addressed:
[DRD-10772] Implement jailer support for node fork server and unified services

Change-Id: I1c85be227165a630c48e688163d63ff1be1a8d43
---
 deps/uv/include/uv.h        |  2 ++
 deps/uv/src/unix/core.c     |  6 ++++++
 deps/v8/src/d8/d8-posix.cc  | 27 +++++++++++++++++++++++++++
 deps/v8/src/d8/d8.h         |  1 +
 src/node_process_methods.cc | 13 +++++++++++++
 5 files changed, 49 insertions(+)

diff --git a/deps/uv/include/uv.h b/deps/uv/include/uv.h
index 0e8132e4..54048ab3 100644
--- a/deps/uv/include/uv.h
+++ b/deps/uv/include/uv.h
@@ -1636,6 +1636,8 @@ UV_EXTERN int uv_cwd(char* buffer, size_t* size);
 
 UV_EXTERN int uv_chdir(const char* dir);
 
+UV_EXTERN int uv_chroot(const char* dir);
+
 UV_EXTERN uint64_t uv_get_free_memory(void);
 UV_EXTERN uint64_t uv_get_total_memory(void);
 UV_EXTERN uint64_t uv_get_constrained_memory(void);
diff --git a/deps/uv/src/unix/core.c b/deps/uv/src/unix/core.c
index ffce948c..b4bff908 100644
--- a/deps/uv/src/unix/core.c
+++ b/deps/uv/src/unix/core.c
@@ -753,6 +753,12 @@ int uv_chdir(const char* dir) {
   return 0;
 }
 
+int uv_chroot(const char* dir) {
+  if (chroot(dir))
+    return UV__ERR(errno);
+
+  return 0;
+}
 
 void uv_disable_stdio_inheritance(void) {
   int fd;
diff --git a/deps/v8/src/d8/d8-posix.cc b/deps/v8/src/d8/d8-posix.cc
index 23767ba2..f5d2cf5f 100644
--- a/deps/v8/src/d8/d8-posix.cc
+++ b/deps/v8/src/d8/d8-posix.cc
@@ -549,6 +549,30 @@ void Shell::ChangeDirectory(const v8::FunctionCallbackInfo<v8::Value>& args) {
   }
 }
 
+void Shell::ChangeRootDirectory(const v8::FunctionCallbackInfo<v8::Value>& args) {
+  if (args.Length() != 1) {
+    const char* message = "chroot() takes one argument";
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), message, NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+  String::Utf8Value directory(args[0]);
+  if (*directory == NULL) {
+    const char* message = "os.chroot(): String conversion of argument failed.";
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), message, NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+  if (chroot(*directory) != 0) {
+    args.GetIsolate()->ThrowException(
+        String::NewFromUtf8(args.GetIsolate(), strerror(errno), NewStringType::kNormal)
+            .ToLocalChecked());
+    return;
+  }
+}
+
 void Shell::SetUMask(const v8::FunctionCallbackInfo<v8::Value>& args) {
   if (args.Length() != 1) {
     const char* message = "umask() takes one argument";
@@ -834,6 +858,9 @@ void Shell::AddOSMethods(Isolate* isolate, Local<ObjectTemplate> os_templ) {
   os_templ->Set(String::NewFromUtf8(isolate, "chdir", NewStringType::kNormal)
                     .ToLocalChecked(),
                 FunctionTemplate::New(isolate, ChangeDirectory));
+  os_templ->Set(String::NewFromUtf8(isolate, "chroot", NewStringType::kNormal)
+                    .ToLocalChecked(),
+                FunctionTemplate::New(isolate, ChangeDirectory));
   os_templ->Set(String::NewFromUtf8(isolate, "setenv", NewStringType::kNormal)
                     .ToLocalChecked(),
                 FunctionTemplate::New(isolate, SetEnvironment));
diff --git a/deps/v8/src/d8/d8.h b/deps/v8/src/d8/d8.h
index 1e0dd43c..2cce3631 100644
--- a/deps/v8/src/d8/d8.h
+++ b/deps/v8/src/d8/d8.h
@@ -460,6 +460,7 @@ class Shell : public i::AllStatic {
   // the "mkdir -p" command.
   static void System(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void ChangeDirectory(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void ChangeRootDirectory(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetEnvironment(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void UnsetEnvironment(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetUMask(const v8::FunctionCallbackInfo<v8::Value>& args);
diff --git a/src/node_process_methods.cc b/src/node_process_methods.cc
index 5aa20688..d71626da 100644
--- a/src/node_process_methods.cc
+++ b/src/node_process_methods.cc
@@ -81,6 +81,18 @@ static void Chdir(const FunctionCallbackInfo<Value>& args) {
   }
 }
 
+static void Chroot(const FunctionCallbackInfo<Value>& args) {
+  Environment* env = Environment::GetCurrent(args);
+
+  if (args.Length() != 1 || !args[0]->IsString())
+    return env->ThrowTypeError("Bad argument.");
+
+  Utf8Value path(args.GetIsolate(), args[0]);
+  int err = uv_chroot(*path);
+  if (err)
+    return env->ThrowUVException(err, "uv_chroot");
+}
+
 // CPUUsage use libuv's uv_getrusage() this-process resource usage accessor,
 // to access ru_utime (user CPU time used) and ru_stime (system CPU time used),
 // which are uv_timeval_t structs (long tv_sec, long tv_usec).
@@ -462,6 +474,7 @@ static void InitializeProcessMethods(Local<Object> target,
 
   env->SetMethodNoSideEffect(target, "cwd", Cwd);
   env->SetMethod(target, "dlopen", binding::DLOpen);
+  env->SetMethod(target, "chroot", Chroot);
   env->SetMethod(target, "reallyExit", ReallyExit);
   env->SetMethodNoSideEffect(target, "uptime", Uptime);
   env->SetMethod(target, "patchProcessObject", PatchProcessObject);
-- 
2.17.1

