From 8e726e95f69dd5bba6eadc44084510cd4dcc1508 Mon Sep 17 00:00:00 2001
From: "baekwoo.jung" <baekwoo.jung@lge.com>
Date: Mon, 28 Sep 2020 11:51:48 +0900
Subject: [PATCH] Merge service module code in com.webos.app.notification

:Release Notes:
Merge service module code

:Detailed Notes:
Merge service module code
and delete service module from package.json list

:Testing Performed:
OK

:QA Notes:
N/A

:Issues Addressed:
N/A

Change-Id: I9b2e64d211efeb10eb4787a9dc241d954e57291f
---
 .env                                    |   7 -
 npm-shrinkwrap.json                     |   8 --
 package.json                            |   5 +-
 src/App/App.js                          |  50 +------
 src/App/App.module.less                 |  15 --
 src/components/AlertPopup/AlertPopup.js |  13 +-
 src/services/Luna/application.js        |  36 +++++
 src/services/Luna/audio.js              |  41 ++++++
 src/services/Luna/bluetooth.js          |  46 ++++++
 src/services/Luna/boot.js               |   9 ++
 src/services/Luna/developer.js          |   9 ++
 src/services/Luna/dmclient.js           |   9 ++
 src/services/Luna/general.js            | 120 ++++++++++++++++
 src/services/Luna/index.js              |  10 ++
 src/services/Luna/mirroring.js          |  10 ++
 src/services/Luna/network.js            |  45 ++++++
 src/services/Luna/notification.js       |  12 ++
 src/services/Luna/request.js            |  39 +++++
 src/services/composite.js               | 183 ++++++++++++++++++++++++
 src/services/index.js                   |  72 ++++++++++
 src/services/package.json               |   3 +
 src/services/utils/bluetoothAddress.js  |  19 +++
 src/services/utils/bluetoothErrors.js   |  10 ++
 src/services/utils/bluetoothProfiles.js |  96 +++++++++++++
 src/services/utils/displayAffinity.js   |  11 ++
 src/services/utils/launchParams.js      |  13 ++
 src/services/utils/networkErrors.js     |  68 +++++++++
 src/services/utils/networkUtils.js      |  95 ++++++++++++
 src/services/utils/profileErrors.js     |  71 +++++++++
 29 files changed, 1032 insertions(+), 93 deletions(-)
 delete mode 100644 .env
 create mode 100644 src/services/Luna/application.js
 create mode 100644 src/services/Luna/audio.js
 create mode 100644 src/services/Luna/bluetooth.js
 create mode 100644 src/services/Luna/boot.js
 create mode 100644 src/services/Luna/developer.js
 create mode 100644 src/services/Luna/dmclient.js
 create mode 100644 src/services/Luna/general.js
 create mode 100644 src/services/Luna/index.js
 create mode 100644 src/services/Luna/mirroring.js
 create mode 100644 src/services/Luna/network.js
 create mode 100644 src/services/Luna/notification.js
 create mode 100644 src/services/Luna/request.js
 create mode 100644 src/services/composite.js
 create mode 100644 src/services/index.js
 create mode 100644 src/services/package.json
 create mode 100644 src/services/utils/bluetoothAddress.js
 create mode 100644 src/services/utils/bluetoothErrors.js
 create mode 100644 src/services/utils/bluetoothProfiles.js
 create mode 100644 src/services/utils/displayAffinity.js
 create mode 100644 src/services/utils/launchParams.js
 create mode 100644 src/services/utils/networkErrors.js
 create mode 100644 src/services/utils/networkUtils.js
 create mode 100644 src/services/utils/profileErrors.js

diff --git a/.env b/.env
deleted file mode 100644
index 0ba6aaa..0000000
--- a/.env
+++ /dev/null
@@ -1,7 +0,0 @@
-#
-# Notification Environment Variables
-#
-MOCK_PROVIDER=Mock
-LUNA_PROVIDER=Luna
-
-REACT_APP_SERVICE_PROVIDER=$LUNA_PROVIDER
diff --git a/npm-shrinkwrap.json b/npm-shrinkwrap.json
index 17ee0da..3227b8f 100644
--- a/npm-shrinkwrap.json
+++ b/npm-shrinkwrap.json
@@ -2893,14 +2893,6 @@
 				"loose-envify": "^1.0.0"
 			}
 		},
-		"webos-auto-service": {
-			"version": "git+ssh://gpro.lge.com/webos-auto/nodejs-module-rse-common.git#8ca45063030c698b5c20bdc1c5675f99b5ab89c2",
-			"from": "git+ssh://gpro.lge.com/webos-auto/nodejs-module-rse-common.git#submissions/2",
-			"requires": {
-				"@enact/core": "^3.2.4",
-				"@enact/webos": "^3.2.4"
-			}
-		},
 		"whatwg-fetch": {
 			"version": "3.0.0",
 			"resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-3.0.0.tgz",
diff --git a/package.json b/package.json
index 06d6e4a..8ca2000 100644
--- a/package.json
+++ b/package.json
@@ -6,8 +6,6 @@
 	"main": "src/index.js",
 	"scripts": {
 		"serve": "nodemon --watch .env --exec \"enact serve\"",
-		"serve-mock": "cross-env REACT_APP_SERVICE_PROVIDER=Mock npm run serve",
-		"serve-luna": "cross-env REACT_APP_SERVICE_PROVIDER=Luna npm run serve",
 		"pack": "enact pack",
 		"pack-p": "enact pack -p",
 		"watch": "enact pack --watch",
@@ -43,8 +41,7 @@
 		"prop-types": "^15.6.2",
 		"ramda": "^0.26.1",
 		"react": "^16.8.0",
-		"react-dom": "^16.8.0",
-		"webos-auto-service": "git+ssh://gpro.lge.com/webos-auto/nodejs-module-rse-common.git#submissions/2"
+		"react-dom": "^16.8.0"
 	},
 	"devDependencies": {
 		"cross-env": "^5.2.1",
diff --git a/src/App/App.js b/src/App/App.js
index 63a93f6..05b1982 100644
--- a/src/App/App.js
+++ b/src/App/App.js
@@ -1,21 +1,18 @@
 import AgateDecorator from '@enact/agate/AgateDecorator';
-import Button from '@enact/agate/Button';
 import ConsumerDecorator from '@enact/agate/data/ConsumerDecorator';
 import ProviderDecorator from '@enact/agate/data/ProviderDecorator';
 import Transition from '@enact/ui/Transition';
-import classNames from 'classnames';
 import PropTypes from 'prop-types';
 import compose from 'ramda/src/compose';
 import React from 'react';
-import getDisplayAffinity from 'webos-auto-service/utils/displayAffinity';
+import getDisplayAffinity from '../services/utils/displayAffinity';
 
 import {
-	__MOCK__,
 	Application,
 	Notification,
 	cancelRequest,
 	requests
-} from 'webos-auto-service';
+} from '../services';
 import NotificationContainer from '../views/NotificationContainer';
 
 import initialState from './initialState';
@@ -153,47 +150,15 @@ class AppBase extends React.Component {
 		console.error(err); // eslint-disable-line no-console
 	}
 
-	// for develop
-	handlePushNotification = () => {
-		this.props.onPushNotification({text: 'Hello !', cbTimeout: this.cbTimeout});
-	}
-
 	cbTimeout = () => {
 		this.props.onHideNotification();
 
 		this.props.onTimer({cbTimeout: this.cbTimeout});
 	}
 
-	// for develop
-	handlePushAlertNotification = () => {
-		console.log("handlePushAlertNotification");
-		this.props.onPushAlertNotification({
-			alertId: 'test sample',
-			message: 'alert test message',
-			buttons: [
-				{
-					focus: false,
-					action: {
-						launchParams: {
-							"id": "com.webos.app.enactbrowser"
-						},
-						serviceMethod: "launch",
-						serviceURI: "luna://com.webos.service.applicationmanager/"
-					},
-					label: "launch"
-				},
-				{
-					focus: false,
-					label: "close"
-				}
-			]
-		});
-	}
-
 	render () {
 		const
 			{
-				className,
 				notification,
 				alertInfo,
 				onHideAllNotification,
@@ -221,19 +186,10 @@ class AppBase extends React.Component {
 		}
 
 		return (
-			/* If this is running Mock data, remove the background, so this becomes an overlay app */
-			<div {...rest} className={classNames(className, css.app, __MOCK__ ? css.withBackground : null)}>
+			<div {...rest} className={css.app}>
 				<Transition css={css} type="fade" className={css.notificationContainerTransition} visible={Boolean(Object.keys(notification).length)}>
 					<div className={css.basement} onClick={onHideAllNotification} />
 				</Transition>
-				{__MOCK__ && (
-					<div className={css.controls}>
-						{/* These are just for a development aid */}
-						<Button onClick={this.handlePushNotification}>Subscribe Notification</Button>
-						{/* End dev aids */}
-						<Button onClick={this.handlePushAlertNotification}>Show Alert</Button>
-					</div>
-				)}
 				<React.Fragment>
 					{notificationControls}
 					{alertInfoList}
diff --git a/src/App/App.module.less b/src/App/App.module.less
index 2766798..0c7ae96 100644
--- a/src/App/App.module.less
+++ b/src/App/App.module.less
@@ -1,11 +1,6 @@
 @import "~@enact/agate/styles/mixins.less";
 
 .app {
-	&.withBackground {
-		background-image:
-			linear-gradient(to bottom right, lighten(red, 20%), lighten(blue, 20%));
-	}
-
 	.transition {
 		pointer-events: none;
 
@@ -19,14 +14,4 @@
 		.position(0);
 		background-image: linear-gradient(to bottom, #000000 0%, rgba(0, 0, 0, 0.85) 9%, rgba(0, 0, 0, 0.48) 31%, rgba(0, 0, 0, 0) 69%);
 	}
-
-	.controls {
-		position: absolute;
-		bottom: 0;
-		padding: 40px;
-
-		& > * {
-			margin: 0;
-		}
-	}
 }
diff --git a/src/components/AlertPopup/AlertPopup.js b/src/components/AlertPopup/AlertPopup.js
index 34dec60..7e7e396 100644
--- a/src/components/AlertPopup/AlertPopup.js
+++ b/src/components/AlertPopup/AlertPopup.js
@@ -1,6 +1,5 @@
 import LabeledIconButton from '@enact/agate/LabeledIconButton';
 import PopupMenu from '@enact/agate/PopupMenu';
-import LS2Request from '@enact/webos/LS2Request';
 import ConsumerDecorator from '@enact/agate/data/ConsumerDecorator';
 import $L from '@enact/i18n/$L/$L';
 import Group from '@enact/ui/Group';
@@ -10,7 +9,6 @@ import React from 'react';
 import PropTypes from 'prop-types';
 
 import css from './AlertPopup.module.less';
-import { __MOCK__ } from 'webos-auto-service';
 
 const SharedIconButtonProps = { backgroundOpacity: 'lightOpaque', inline: true, size: 'huge'};
 
@@ -85,16 +83,7 @@ const AlertPopupDecorator = ConsumerDecorator({
 			}
 			let action = state.app.alertInfo[alertId].buttons[ev.selected].action;
 			if (typeof action === 'object' && action.hasOwnProperty('serviceURI') && action.hasOwnProperty('serviceMethod')) {
-				if (!__MOCK__) {
-					const req = new LS2Request();
-					req.send({
-						service: action.serviceURI,
-						method: action.serviceMethod,
-						parameters: Object.assign({}, action.launchParams)
-					});
-				} else {
-					console.log("api call: " + action.serviceURI + action.serviceMethod);
-				}
+				console.log("api call: " + action.serviceURI + action.serviceMethod);
 			}
 			// close & delete popup
 			update((state) => {
diff --git a/src/services/Luna/application.js b/src/services/Luna/application.js
new file mode 100644
index 0000000..b7601df
--- /dev/null
+++ b/src/services/Luna/application.js
@@ -0,0 +1,36 @@
+import luna from './request';
+
+const ApplicationService = {
+	// Launch Point
+	addLaunchPoint: luna('com.webos.service.applicationmanager', 'addLaunchPoint'),
+	moveLaunchPoint: luna('com.webos.service.applicationmanager', 'moveLaunchPoint'),
+	updateLaunchPoint: luna('com.webos.service.applicationmanager', 'updateLaunchPoint'),
+	removeLaunchPoint: luna('com.webos.service.applicationmanager', 'removeLaunchPoint'),
+	listLaunchPoints: luna('com.webos.service.applicationmanager', 'listLaunchPoints'), // subscribable
+
+	// app download & install
+	downloadApp: luna('com.webos.service.downloadmanager', 'download'),
+	installApp: luna('com.webos.appInstallService', 'install'),
+	removeApp: luna('com.webos.appInstallService', 'remove'),
+
+	// Application
+	listApps: luna('com.webos.service.applicationmanager', 'listApps'), // subscribable
+	running: luna('com.webos.service.applicationmanager', 'running'), // subscribable,
+	getForegroundAppInfo: luna('com.webos.service.applicationmanager', 'getForegroundAppInfo'),  // subscribable
+	setOrder: luna('com.webos.service.applicationmanager', 'setOrder'),
+
+	// Application Handling
+	launch: luna('com.webos.service.applicationmanager', 'launch'),
+	pause: luna('com.webos.service.applicationmanager', 'pause'),
+	close: luna('com.webos.service.applicationmanager', 'close'),
+	closeByAppId: luna('com.webos.service.applicationmanager', 'closeByAppId'),
+
+	// Application Specific
+	getAppInfo: luna('com.webos.service.applicationmanager', 'getAppInfo'),
+	getAppLifeStatus: luna('com.webos.service.applicationmanager', 'getAppLifeStatus'),  // subscribable
+	getAppLifeEvents: luna('com.webos.service.applicationmanager', 'getAppLifeEvents'), // subscribable
+	getAppStatus: luna('com.webos.service.applicationmanager', 'getAppStatus') // subscribable
+};
+
+export default ApplicationService;
+export {ApplicationService};
diff --git a/src/services/Luna/audio.js b/src/services/Luna/audio.js
new file mode 100644
index 0000000..3cfe874
--- /dev/null
+++ b/src/services/Luna/audio.js
@@ -0,0 +1,41 @@
+import luna from './request';
+
+const AudioService = {
+    setSoundToSettingsService: ({name, value, displayId, ...rest}) => {
+		let params = {
+			category: "Session" + displayId,
+			settings: {}
+		};
+		params.settings[name] = value;
+		return luna('com.webos.settingsservice', 'setSystemSettings', params)(rest);
+
+	},
+	getSoundsFromSettingsService: ({displayId, subscribe, ...rest}) => {
+		let params = {
+			category: "Session" + displayId,
+			keys: ['Volume', 'MediaVolume', 'SoundEffectVolume'],
+			subscribe: subscribe
+		};
+		return luna('com.webos.settingsservice', 'getSystemSettings', params)(rest);
+    },
+    getSoundFromSettingsService: ({displayId, subscribe, key, ...rest}) => {
+		let params = {
+			category: "Session" + displayId,
+			key: key,
+			subscribe: subscribe
+		};
+		return luna('com.webos.settingsservice', 'getSystemSettings', params)(rest);
+	},
+	getEffectVolume: luna('com.webos.service.audio', 'notification/getVolume'),
+	setEffectVolume: luna('com.webos.service.audio', 'notification/setVolume'),
+    getMediaVolume: luna('com.webos.service.audio', 'media/getVolume'),
+    setMediaVolume: luna('com.webos.service.audio', 'media/setVolume'),
+    getMasterVolume: luna('com.webos.service.audio', 'master/getVolume'),
+    setMasterVolume: luna('com.webos.service.audio', 'master/setVolume', {
+        soundOutput:"alsa"
+    })
+};
+
+
+export default AudioService;
+export {AudioService};
diff --git a/src/services/Luna/bluetooth.js b/src/services/Luna/bluetooth.js
new file mode 100644
index 0000000..63c21ae
--- /dev/null
+++ b/src/services/Luna/bluetooth.js
@@ -0,0 +1,46 @@
+import luna from './request';
+
+const BluetoothService = {
+	setDeviceToSettingsService: ({address, name, displayId, ...rest}) => {
+		let inputParam = {};
+		inputParam[address] = name;
+
+		let params = {
+			category: "Session" + displayId,
+			settings: {
+				BTDevices: inputParam
+			}
+		};
+		return luna('com.webos.settingsservice', 'setSystemSettings', params)(rest);
+
+	},
+	getDevicesFromSettingsService: ({displayId, subscribe, ...rest}) => {
+		let params = {
+			category: "Session" + displayId,
+			key: 'BTDevices',
+			subscribe: subscribe
+		};
+		return luna('com.webos.settingsservice', 'getSystemSettings', params)(rest);
+	},
+	setBluetoothAdapter: ({enable = true, ...rest} = {}) => {
+		return luna('com.webos.service.bluetooth2', 'adapter/setState', {
+			powered: enable
+		})(rest);
+	},
+	queryAdapters: luna('com.webos.service.bluetooth2', 'adapter/queryAvailable'), // subscribable
+	getBluetoothAdapter: luna('com.webos.service.bluetooth2', 'adapter/getStatus'), // subscribable
+	getKnownBluetoothDevices: luna('com.webos.service.bluetooth2', 'device/getStatus'), // subscribable
+	getRemoteVolume: luna('com.webos.service.bluetooth2', 'avrcp/getRemoteVolume'), // subscribable
+	setAbsoluteVolume: luna('com.webos.service.bluetooth2', 'avrcp/setAbsoluteVolume'),
+	cancelBluetoothDiscovery: luna('com.webos.service.bluetooth2', 'adapter/cancelDiscovery'),
+	startBluetoothDiscovery: luna('com.webos.service.bluetooth2', 'adapter/startDiscovery'),
+	pairBluetoothDevice: luna('com.webos.service.bluetooth2', 'adapter/pair'), // subscribable
+	unpairBluetoothDevice: luna('com.webos.service.bluetooth2', 'adapter/unpair'),
+	connectA2DP: luna('com.webos.service.bluetooth2', 'a2dp/connect'), // subscribable
+	disconnectA2DP: luna('com.webos.service.bluetooth2', 'a2dp/disconnect'),
+	connectHFP: luna('com.webos.service.bluetooth2', 'hfp/connect'), // subscribable
+	disconnectHFP: luna('com.webos.service.bluetooth2', 'hfp/disconnect')
+};
+
+export default BluetoothService;
+export {BluetoothService};
diff --git a/src/services/Luna/boot.js b/src/services/Luna/boot.js
new file mode 100644
index 0000000..7fc0b5d
--- /dev/null
+++ b/src/services/Luna/boot.js
@@ -0,0 +1,9 @@
+import luna from './request';
+
+const BootService = {
+	notifyFirstUseDone: luna('com.webos.bootManager', 'firstUseDone'),
+	factoryReset : luna('com.webos.bootManager', 'factoryReset')
+};
+
+export default BootService;
+export {BootService};
diff --git a/src/services/Luna/developer.js b/src/services/Luna/developer.js
new file mode 100644
index 0000000..9d646a7
--- /dev/null
+++ b/src/services/Luna/developer.js
@@ -0,0 +1,9 @@
+import luna from './request';
+
+const DeveloperService = {
+	getDeveloperMode: luna('com.webos.service.devmode','getDevMode'),
+	setDeveloperMode: luna('com.webos.service.devmode','setDevMode')
+};
+
+export default DeveloperService;
+export {DeveloperService};
\ No newline at end of file
diff --git a/src/services/Luna/dmclient.js b/src/services/Luna/dmclient.js
new file mode 100644
index 0000000..d021b0e
--- /dev/null
+++ b/src/services/Luna/dmclient.js
@@ -0,0 +1,9 @@
+import luna from './request';
+
+const DMClientService = {
+	getStatus: luna('com.lge.service.dmclient', 'getStatus'), // subscribable
+	userInit: luna('com.lge.service.dmclient','userInit'), 
+};
+
+export default DMClientService;
+export {DMClientService};
diff --git a/src/services/Luna/general.js b/src/services/Luna/general.js
new file mode 100644
index 0000000..daf09d5
--- /dev/null
+++ b/src/services/Luna/general.js
@@ -0,0 +1,120 @@
+import luna from './request';
+
+const GeneralService = {
+	getDeviceName: luna('com.webos.settingsservice', 'getSystemSettings', {
+		category:'network',
+		keys:['deviceName'],
+		subscribe:true
+	}, res => ({deviceName: res.settings.deviceName})), // subscribable
+	// Supports: {'deviceName':<string>}
+	setDeviceName: luna('com.webos.settingsservice', 'setSystemSettings', {
+		category:'network'
+	}),
+	getOSInfo: luna('com.webos.service.systemservice/osInfo', 'query', {
+		parameters: ['webos_release', 'webos_build_id']
+	}, res => ({version: res.webos_release, build: res.webos_build_id})),
+	getLocaleInfo: luna('com.webos.settingsservice', 'getSystemSettings', {
+		key: 'localeInfo'
+	}, res => res.settings.localeInfo), // subscribable
+	// luna-send -n 1 luna://com.webos.settingsservice/setSystemSettings '{ "settings": { "localeInfo": { "locales": { "UI": "en-US" } } } }'
+	setLocaleInfo: ({locale, keyboards, ...rest}) => {
+		console.log('locale',locale,'keyboards',keyboards);
+		const param = {
+			settings: {
+				localeInfo: {
+					locales: {},
+				}
+			}
+		};
+		if (locale) param.settings.localeInfo['locales'] = {UI:locale};
+		if (keyboards) param.settings.localeInfo['keyboards'] = keyboards;
+		console.log('param',param);
+
+		return luna('com.webos.settingsservice', 'setSystemSettings', param)(rest);
+	},
+	getFromSettingsService: ({subscribe, category, key, ...rest}) => {
+		let params = {
+			category: category || "",
+			key: key,
+			subscribe: subscribe
+		};
+		return luna('com.webos.settingsservice', 'getSystemSettings', params)(rest);
+	},
+	setToSettingsService: ({name, category, value, ...rest}) => {
+		let params = {
+			category: category || "",
+			settings: {}
+		};
+		params.settings[name] = value;
+		return luna('com.webos.settingsservice', 'setSystemSettings', params)(rest);
+	},
+
+	getSystemTime: luna('com.webos.service.systemservice/time', 'getSystemTime'), // subscribable
+	setSystemTime: luna('com.webos.service.systemservice/time', 'setSystemTime'),
+	getTimePrefs: luna('com.webos.service.systemservice', 'getPreferences', {
+		keys: ['useNetworkTime', 'useNetworkTimeZone', 'timeZone', 'timeFormat']
+	}), // subscribable
+	// Supports: {'enable':<boolean>}
+	setAutoClock: ({enable = true, ...rest} = {}) => {
+		const setting = {autoClock: (enable ? 'on' : 'off')};
+		return luna('com.webos.settingsservice', 'setSystemSettings', {
+			category: 'time',
+			setting
+		})(rest);
+	},
+	// Supports: {'useNetworkTime':<boolean>}
+	setNetworkTime: luna('com.webos.service.systemservice', 'setPreferences'),
+	
+	// support params
+	// {
+	// 	useNetworkTime: <boolean>,
+	// 	timeZone: { ZoneID: <string>},
+	// 	timeFormat: <string>
+	// }
+	setPreferences: luna('com.webos.service.systemservice', 'setPreferences'),
+
+	getSystemCountry: luna('com.webos.settingsservice', 'getSystemSettings', {
+		category: 'option',
+		keys: ['country', 'countryRegion']
+	}, res => ({
+		country: res.settings.country,
+		countryRegion: res.settings.countryRegion
+	})), // subscribable
+	setSystemCountry: ({country, ...rest}) => {
+		const settings = {country};
+		luna('com.webos.settingsservice', 'setSystemSettings', {
+			category: 'option',
+			settings
+		})(rest);
+	},
+	getSystemLocaleList: luna('com.webos.settingsservice', 'getSystemSettingValues', {
+		key: 'locale'
+	}),
+	getSystemCountryList: luna('com.webos.settingsservice', 'getSystemSettingValues', {
+		category: 'option',
+		key: 'country'
+	}),
+	getSystemRegionList: luna('com.webos.settingsservice', 'getSystemSettingValues', {
+		category: 'option',
+		key: 'countryRegion'
+	}),
+	getSystemTimezoneList: luna('com.webos.service.systemservice', 'getPreferenceValues', {
+		key: 'timeZone'
+	}),
+	createToast: luna('com.webos.notification', 'createToast'),
+    setAutomaticUpdate: ({flag, ...rest}) => {
+        const settings = {AutoSWUpdate: (flag)?"On":"Off"};
+        luna('com.webos.settingsservice', 'setSystemSettings', {
+            settings
+        })(rest);
+    },
+    getAutomaticUpdate: luna('com.webos.settingsservice', 'getSystemSettings', {
+        key: 'AutoSWUpdate'
+    }, res => ({
+        returnValue: true,
+        AutoSWUpdate: (res.settings.AutoSWUpdate == 'On')? true: false
+    }))
+};
+
+export default GeneralService;
+export {GeneralService};
diff --git a/src/services/Luna/index.js b/src/services/Luna/index.js
new file mode 100644
index 0000000..18504a0
--- /dev/null
+++ b/src/services/Luna/index.js
@@ -0,0 +1,10 @@
+export {default as Application} from './application';
+export {default as Audio} from './audio';
+export {default as Bluetooth} from './bluetooth';
+export {default as Boot} from './boot';
+export {default as Developer} from './developer';
+export {default as DMClient} from './dmclient';
+export {default as General} from './general';
+export {default as Mirroring} from './mirroring';
+export {default as Network} from './network';
+export {default as Notification} from './notification';
diff --git a/src/services/Luna/mirroring.js b/src/services/Luna/mirroring.js
new file mode 100644
index 0000000..3f6e76b
--- /dev/null
+++ b/src/services/Luna/mirroring.js
@@ -0,0 +1,10 @@
+import luna from './request';
+
+const MirroringService = {
+	setAppMirroring: luna('com.webos.surfacemanager', 'setAppMirroring'),
+	getAppMirroring: luna('com.webos.surfacemanager', 'getAppMirroring'), // subscribable
+    setAudioMirroring: luna('com.webos.service.audio', 'auto/setMirrorMode')
+};
+
+export default MirroringService;
+export {MirroringService};
diff --git a/src/services/Luna/network.js b/src/services/Luna/network.js
new file mode 100644
index 0000000..c099214
--- /dev/null
+++ b/src/services/Luna/network.js
@@ -0,0 +1,45 @@
+import luna from './request';
+
+const NetworkService = {
+	getConnectionInfo: luna('com.webos.service.connectionmanager', 'getStatus'), // subscribable
+	getMacAddress: luna('com.webos.service.connectionmanager', 'getinfo',
+		res => ({wifi: res.wifiInfo, wired: res.wiredInfo})), // subscribable
+
+	setWifiAdapter: ({enable = true, ...rest} = {}) => {
+		return luna('com.webos.service.wifi', 'setstate', {
+			state: enable ? 'enabled' : 'disabled'
+		}, res => ({returnValue: res.returnValue}))(rest);
+	},
+	getWifiAdapter: luna('com.webos.service.wifi', 'getstatus'),
+	getWifiNetworks: luna('com.webos.service.wifi', 'findnetworks', {},
+		res => ({foundNetworks: res.foundNetworks.map(p => p.networkInfo)})), // subscribable
+	// Supports one of:
+	//    {'profileId':<number>}
+	//    {'ssid':<string>,'security':<object>}
+	//        Security object has various options; refer to docs.
+	//        Eg: {'securityType':'psk','simpleSecurity':{'passKey':<string>}}
+	connectWifi: luna('com.webos.service.wifi', 'connect'), // subscribable
+	getWifiProfiles: luna('com.webos.service.wifi', 'getprofilelist', {},
+		res => ({profileList: res.profileList.map(p => p.wifiProfile)})),
+	// Supports: {'profileId':<number>}
+	deleteWifiProfile: luna('com.webos.service.wifi', 'deleteprofile'),
+	createWPSPIN: luna('com.webos.service.wifi', 'createwpspin', {},
+		res => ({pin: res.wpspin})),
+	// Supports: {'wpsPin':<number>}
+	// Alternately, no pin needed for when PIN-based WPS is not being used.
+	startWPS: luna('com.webos.service.wifi', 'startwps'),
+	cancelWPS: luna('com.webos.service.wifi', 'cancelwps'),
+
+	// Supports one of:
+	//    {'method':'manual','address':'<string>','netmask':'<string>','gateway':'<string>','ssid':'<string>'}
+	//    {'method':'dhcp','ssid':'<string>'}
+	setIPv4: luna('com.webos.service.connectionmanager', 'setipv4'),
+	// Supports one of:
+	//    {'dns':['<string>', ...],'ssid':'<string>'}
+	//    {'dns':[],'ssid':'<string>'}
+	setDNS: luna('com.webos.service.connectionmanager', 'setdns')
+};
+
+export default NetworkService;
+export {NetworkService};
+
diff --git a/src/services/Luna/notification.js b/src/services/Luna/notification.js
new file mode 100644
index 0000000..523e5a2
--- /dev/null
+++ b/src/services/Luna/notification.js
@@ -0,0 +1,12 @@
+import luna from './request';
+
+const NotificationService = {
+	getAlertNotification: luna('com.webos.notification', 'getAlertNotification'),
+	getInputAlertNotification: luna('com.webos.notification', 'getInputAlertNotification'),
+	getPincodePromptNotification: luna('com.webos.notification', 'getPincodePromptNotification'),
+	getToastNotification: luna('com.webos.notification', 'getToastNotification'),
+	createToast: (params) => luna('com.webos.notification', 'createToast')(params)
+};
+
+export default NotificationService;
+export {NotificationService};
diff --git a/src/services/Luna/request.js b/src/services/Luna/request.js
new file mode 100644
index 0000000..9729c59
--- /dev/null
+++ b/src/services/Luna/request.js
@@ -0,0 +1,39 @@
+import LS2Request from '@enact/webos/LS2Request';
+
+const fwd = res => res;
+
+const handler = (callback, map = fwd) => callback && (res => {
+	if ((res.errorCode || res.returnValue === false)) {
+		const err = new Error(res.errorText);
+		err.code = res.errorCode;
+		callback(err);
+	} else {
+		callback(map(res));
+	}
+});
+
+const luna =  (
+		service,
+		method,
+		{subscribe = false, timeout = 0, ...params} = {},
+		map
+) => (
+	({onSuccess, onFailure, onTimeout, onComplete, ...additionalParams} = {}) => {
+		const req = new LS2Request();
+		req.send({
+			service: 'luna://' + service,
+			method,
+			parameters: Object.assign({}, params, additionalParams),
+			onSuccess: handler(onSuccess, map),
+			onFailure: handler(onFailure),
+			onTimeout: handler(onTimeout),
+			onComplete: handler(onComplete, map),
+			subscribe,
+			timeout
+		});
+		return req;
+	}
+);
+
+export default luna;
+export {luna};
diff --git a/src/services/composite.js b/src/services/composite.js
new file mode 100644
index 0000000..acc304b
--- /dev/null
+++ b/src/services/composite.js
@@ -0,0 +1,183 @@
+/* eslint-disable no-console, no-undefined */
+
+import {forward} from '@enact/core/handle';
+
+import {findAdapterAddress} from './utils/bluetoothAddress';
+import {canConnectDevice, isAudioDevice} from './utils/bluetoothProfiles';
+
+class RequestProxy {
+	constructor () {
+		this._req = null;
+		this.proxy = new Proxy({}, {
+			get: (target, name) => {
+				if (this._req) return this._req[name];
+			},
+			set: (target, name, value) => {
+				if (this._req) this._req[name] = value;
+
+				return value;
+			}
+		});
+	}
+	set req (value)  {
+		this._req = value;
+	}
+	get req () {
+		return this.proxy;
+	}
+}
+
+function composite (Service, requests) {
+
+	// `Service` will not be fully populated when passed so it should only be accessed *within* a
+	// composite service method and not directly within this function.
+
+	const getAdapter = ({subscribe, name, ...params}) => {
+		if (!subscribe) {
+			console.error('getAdapter requires subscription mode');
+			return;
+		}
+
+		Service.cancelRequest('getBluetoothAdapter');
+		requests.getBluetoothAdapter = Service.Bluetooth.getBluetoothAdapter({
+			...params,
+			subscribe: true,
+			onSuccess: ({adapters = []}) => {
+				const adapter = adapters.find(a => a.name === name);
+				const address = adapter ? adapter.adapterAddress : '';
+				const enabled = adapter ? adapter.powered : false;
+				const discovering = adapter ? adapter.discovering : false;
+				const discoverable = adapter ? adapter.discoverable : false;
+				const pairing = adapter ? adapter.pairing : false;
+
+				forward('onSuccess', {
+					address,
+					enabled,
+					discovering,
+					discoverable,
+					pairing
+				}, params);
+			}
+		});
+
+		return {
+			cancel: () => {
+				Service.cancelRequest('getBluetoothAdapter');
+			}
+		};
+	};
+
+	const connectDevice = ({profile, ...params}) => {
+		let req;
+		if (isAudioDevice(profile.classOfDevice)) {
+			req = requests.connectA2DP = Service.Bluetooth.connectA2DP({
+				...params,
+				address: profile.address
+			});
+		}
+
+		return req;
+	};
+
+	const toggleAdapter = ({profiles, subscribe, ...params}) => {
+		if (!subscribe) {
+			console.error('toggleAdapter requires subscription mode');
+			return;
+		}
+
+		const proxy = new RequestProxy();
+
+		let onComplete = params.onComplete;
+		let profile;
+
+		proxy.req = requests.setBluetoothAdapter = Service.Bluetooth.setBluetoothAdapter({
+			...params,
+			onSuccess: () => {
+				const enable = params.enable;
+
+				// Find the paired device with the strongest signal
+				profile = profiles
+					.filter(canConnectDevice)
+					.sort((a, b) => b.rssi - a.rssi)
+					.shift();
+
+				// we can't connect so bail out now
+				if (!enable || !profile) {
+					forward('onSuccess', {
+						connected: false,
+						enable,
+						profile,
+						request: 'endToggle',
+						subscribed: false
+					}, params);
+
+					return;
+				}
+
+				forward('onSuccess', {
+					connected: false,
+					enable,
+					profile,
+					request: 'connect',
+					subscribed: true
+				}, params);
+
+				// we don't want to call onComplete until the composite action completes
+				// if we're trying to connect
+				onComplete = null;
+
+				// cache the event forwarder which is used in two places below
+				const forwardSuccess = forward('onSuccess', {
+					connected: true,
+					enable,
+					profile,
+					request: 'endToggle',
+					subscribed: false
+				});
+
+				proxy.req = connectDevice({
+					profile,
+					adapterAddress: params.adapterAddress,
+					onFailure: (ev) => {
+						const {code} = ev;
+						if (code === 128 || code === 131) {
+							// "Succeed" for trying to connect or already connected codes
+							forwardSuccess(params);
+						} else {
+							ev.profile = profile;
+							ev.request = 'connect';
+							forward('onFailure', ev, params);
+						}
+					},
+					onSuccess: () => {
+						forwardSuccess(params);
+					},
+					onComplete: params.onComplete
+				});
+			},
+			onFailure: (err) => {
+				err.request = 'enable';
+				forward('onFailure', err, params);
+			},
+			onComplete: () => {
+				// Only forward onComplete if we didn't attempt to connect
+				if (onComplete) onComplete();
+			}
+		});
+
+		return proxy.req;
+	};
+
+	return {
+		Bluetooth: {
+			connectDevice,
+			getAdapter,
+			toggleAdapter
+		}
+	};
+}
+
+export default composite;
+export {
+	composite
+};
diff --git a/src/services/index.js b/src/services/index.js
new file mode 100644
index 0000000..e181f3c
--- /dev/null
+++ b/src/services/index.js
@@ -0,0 +1,72 @@
+import composite from './composite';
+
+const provider = require('./Luna');
+const requests = {};
+
+// Cancel an active request by name and remove from mapping
+const cancelRequest = name => {
+	if (requests[name]) {
+		requests[name].cancel();
+		requests[name] = null;
+	}
+};
+// Cancel all active requests of all categories
+const cancelAllRequests = (exclude = []) =>
+	Object.keys(requests).filter(r => !exclude.includes(r)).forEach(cancelRequest);
+
+// Utility wrapper function to auto-remove completed from requests object
+const handleCleanup = (name, fn) => ({subscribe, onComplete, ...rest}) => (
+	fn({
+		subscribe,
+		...rest,
+		onComplete: res => {
+			if (!subscribe) cancelRequest(name);
+			if (onComplete) onComplete(res);
+		}
+	})
+);
+
+// Service API endpoints and cancellation functions
+const Service = {
+	cancelAllRequests,
+	cancelRequest
+};
+
+const categories = Object.keys(provider);
+const compositeService = composite(Service, requests);
+
+// Add category provider APIs to service namespace
+categories.forEach(c => {
+	Service[c] = {};
+	const endpoints = Object.keys(provider[c]);
+	endpoints.forEach(name => {
+		Service[c][name] = handleCleanup(name, provider[c][name]);
+	});
+
+	// Add any composite services for the category
+	Object.assign(Service[c], compositeService[c]);
+
+	Service[c].cancelAllRequests = (exclude = []) =>
+		Object.keys(Service[c]).filter(r => !exclude.includes(r)).forEach(cancelRequest);
+});
+
+export default Service;
+export const {
+	Application,
+	Audio,
+	Bluetooth,
+	Boot,
+	Developer,
+	DMClient,
+	General,
+	Mirroring,
+	Network,
+	Notification
+} = Service;
+export {
+	Service,
+	requests,
+	categories,
+	cancelRequest,
+	cancelAllRequests
+};
diff --git a/src/services/package.json b/src/services/package.json
new file mode 100644
index 0000000..22cf181
--- /dev/null
+++ b/src/services/package.json
@@ -0,0 +1,3 @@
+{
+   "main": "index.js"
+}
diff --git a/src/services/utils/bluetoothAddress.js b/src/services/utils/bluetoothAddress.js
new file mode 100644
index 0000000..2129c21
--- /dev/null
+++ b/src/services/utils/bluetoothAddress.js
@@ -0,0 +1,19 @@
+import {getDisplayAffinity} from './displayAffinity';
+
+const findAdapterAddress = (adapters) => {
+	let active;
+
+	if (getDisplayAffinity() === 1) {
+		// secondary display, use first non-default adapter
+		active = adapters.find(a => !a['default']);
+	} else {
+		// use default adapter
+		active = adapters.find(a => a['default']);
+	}
+
+	return active && active.adapterAddress;
+};
+
+export {
+	findAdapterAddress
+};
diff --git a/src/services/utils/bluetoothErrors.js b/src/services/utils/bluetoothErrors.js
new file mode 100644
index 0000000..2124aa4
--- /dev/null
+++ b/src/services/utils/bluetoothErrors.js
@@ -0,0 +1,10 @@
+import $L from '@enact/i18n/$L';
+
+export function findMsgByErrorCode (code, message = '') {
+	return {
+		code,
+		error: $L('Your Display failed to connect the device.'),
+		reason: message,
+		suggestion: $L('Please check the status and try again')
+	};
+}
diff --git a/src/services/utils/bluetoothProfiles.js b/src/services/utils/bluetoothProfiles.js
new file mode 100644
index 0000000..e839efe
--- /dev/null
+++ b/src/services/utils/bluetoothProfiles.js
@@ -0,0 +1,96 @@
+const PROFILES = [
+	// https://www.bluetooth.com/specifications/profiles-overview/
+	'3dsp',	 // 3D Synchronization Profile	1.0.3	Active	15 Dec 2015	N/A
+	'a2dp',  // Advanced Audio Distribution Profile	1.3.2	Active	21 Jan 2019	A2DP_1.3.2_showing_changes_from_A2DP_1.3.1
+	'avrcp', // A/V Remote Control Profile	1.6.2	Active	21 Jan 2019	AVRCP_1.6.2_showing_changes_from_AVRCP_1.6.1
+	'bip',   // Basic Imaging Profile	1.2.1	Active	21 Jan 2019	BIP_1.2.1_showing_changes_from_BIP_1.2.0
+	'bpp',   // Basic Printing Profile	1.2	Active	27 Apr 2006	N/A
+	'ctn',   // Calendar Tasks and Notes Profiles	1.0.1	Active	21 Jan 2019	CTN_1.0.1_showing_changes_from_CTN_1.0.0
+	'di',    // Device ID Profile	1.3	Active	26 Mar 2007	N/A
+	'dun',   // Dial-Up Networking Profile	1.2	Active	06 Nov 2012	N/A
+	'ftp',   // File Transfer Profile	1.3.1	Active	15 Dec 2015	N/A
+	'gavdp', // Generic A/V Distribution Profile	1.3	Active	24 Jul 2012	N/A
+	'gnss',  // Global Navigation Satellite System Profile	1.0	Active	13 Mar 2012	N/A
+	'goep',  // Generic Object Exchange Profile	2.1.1	Active	15 Dec 2015	N/A
+	'gpp',   // Generic PIM Profile	1.0.1	Active	15 Dec 2015	N/A
+	'hcrp',  // Hardcopy Cable Replacement Profile	1.2	Active	27 Apr 2006	N/A
+	'hdp',   // Health Device Profile	1.1	Active	24 Jul 2012	N/A
+	'hfp',   // Hands-Free Profile	1.7.2	Active	21 Jan 2019	HFP_1.7.2_showing_changes_from_HFP_1.7.1
+	'hid',   // Human Interface Device Profile	1.1.1	Active	15 Dec 2015	N/A
+	'hsp',   // Headset Profile	1.2	Active	18 Dec 2008	N/A
+	'map',   // Message Access Profile	1.4.2	Active	13 Aug 2019	MAP_1.4.2_showing_changes_from_MAP_1.4.1
+	'mps',   // Multi Profile Specification	1.0	Active	02 Jul 2013	N/A
+	'opp',   // Object Push Profile	1.2.1	Active	15 Dec 2015	N/A
+	'pan',   // Personal Area Networking Profile	1.0	Active	20 Feb 2003	N/A
+	'pbap',  // Phone Book Access Profile	1.2.3	Active	21 Jan 2019	PBAP_1.2.3_showing_changes_from_PBAP_1.2.1
+	'sap',   // SIM Access Profile	1.1.1	Active	15 Dec 2015	N/A
+	'spp',   // Serial Port Profile	1.2	Active	24 Jul 2012	N/A
+	'synch', // Synchronization Profile	1.2.1	Active	15 Dec 2015	N/A
+	'vdp',   // Video Distribution Profile	1.1	Active	24 Jul 2012	N/A
+
+	// https://www.bluetooth.com/specifications/gatt/
+	'gatt'   // Generic BLE profile
+];
+
+const PROFILE_ICONS = {
+	a2dp: 'speaker',
+	hsp: 'earphone',
+	hid: 'bluetooth',
+	vdp: 'rearscreen',
+	pbap: 'mobile'
+};
+
+// https://www.bluetooth.com/specifications/assigned-numbers/baseband/
+const DEVICE_CLASSES = {
+	// Major Service Classes
+	POSITIONING: 65536,
+	NETWORKING: 131072,
+	RENDERING: 262144,
+	CAPTURING: 524288,
+	OBJECT_TRANSFER: 1048576,
+	AUDIO: 2097152,
+	TELEPHONY: 4194304,
+	INFORMATION: 8388608,
+
+	// Major Device Classes
+	MINOR: 2048 + 1024 + 512 + 256,
+	COMPUTER: 256,
+	PHONE: 512,
+	LAN: 512 + 256,
+	AUDIO_VIDEO: 1024,
+	PERIPHERAL: 1024 + 256,
+	IMAGING: 1024 + 512,
+	TOY: 2048,
+	HEALTH: 2048 + 256
+};
+
+const matchClass = (a, b) => (a ^ b) === 0;
+
+const isMinorDevice = (deviceClass, minorClasses) => {
+	const minor = deviceClass & DEVICE_CLASSES.MINOR;
+
+	if (Array.isArray(minorClasses)) {
+		return minorClasses.findIndex(c => matchClass(minor, c)) !== -1;
+	}
+
+	return matchClass(minor, minorClasses);
+};
+
+const isAudioDevice = (deviceClass) => {
+	return isMinorDevice(deviceClass, DEVICE_CLASSES.AUDIO_VIDEO);
+};
+
+const getProfileIcon = (profile) => PROFILE_ICONS[profile];
+
+const canConnectDevice = (profile) => {
+	// This centralizes all checks for if we support connecting to a bluetooth device
+	return profile && profile.paired && isAudioDevice(profile.classOfDevice);
+};
+
+export {
+	DEVICE_CLASSES,
+	PROFILES,
+	canConnectDevice,
+	getProfileIcon,
+	isAudioDevice
+};
diff --git a/src/services/utils/displayAffinity.js b/src/services/utils/displayAffinity.js
new file mode 100644
index 0000000..b6a1aec
--- /dev/null
+++ b/src/services/utils/displayAffinity.js
@@ -0,0 +1,11 @@
+const getDisplayAffinity = () => {
+	try {
+		const {displayAffinity} = JSON.parse(window.PalmSystem.launchParams);
+		return (typeof displayAffinity !== 'undefined') ? displayAffinity : 0;
+	} catch (e) {
+		return 0;
+	}
+};
+
+export default getDisplayAffinity;
+export {getDisplayAffinity};
diff --git a/src/services/utils/launchParams.js b/src/services/utils/launchParams.js
new file mode 100644
index 0000000..721cd9c
--- /dev/null
+++ b/src/services/utils/launchParams.js
@@ -0,0 +1,13 @@
+/* eslint-disable no-undefined */
+
+const getLaunchParams = () => {
+	try {
+		const params = JSON.parse(window.webOSSystem.launchParams);
+		return (typeof params !== 'undefined') ? params : undefined;
+	} catch (e) {
+		return undefined;
+	}
+};
+
+export default getLaunchParams;
+export {getLaunchParams};
diff --git a/src/services/utils/networkErrors.js b/src/services/utils/networkErrors.js
new file mode 100644
index 0000000..60c6a3e
--- /dev/null
+++ b/src/services/utils/networkErrors.js
@@ -0,0 +1,68 @@
+import $L from '@enact/i18n/$L';
+
+export const NETWORK_ERROR = {
+	UNKNOWN_ERROR: 1,
+	INVALID_PARAMETERS: 3,
+	CONNMAN_UNAVAILABLE: 4,
+	WIFI_TECHNOLOGY_UNAVAILABLE: 5,
+	WIFI_OFF: 7,
+	PASSWORD_ERROR: 10,
+	AUTHENTICATION_FAILURE: 11,
+	LOGIN_FAILURE: 12,
+	CONNECTION_ESTABLISHMENT_FAILURE: 13,
+	INVALID_IP_ADDRESS: 14,
+	PINCODE_ERROR: 15,
+	OUT_OF_RAGE: 16,
+	NETWORK_NOT_FOUND: 102,
+	WIFI_ALREADY_ENABLED: 103,
+	WIFI_ALREADY_DISABLED: 104,
+	PROFILE_NOT_FOUND: 105,
+	ERROR_SCANNING_NETWORK: 108,
+	ALREADY_SCANNING: 160,
+	INVALID_SCAN_INTERVAL: 161
+};
+
+export function findMsgByErrorCode (code) {
+	const msg = {
+		code,
+		message: $L('Unable to connect to the network.'),
+		reason: '',
+		suggestion: $L('Please check the status and try again')
+	};
+	switch (code) {
+		case NETWORK_ERROR.UNKNOWN_ERROR:
+			msg.reason = $L('Could not indentify the reason for failure.'); // i18n : New exception message of unknown error
+			break;
+		case NETWORK_ERROR.PASSWORD_ERROR:
+			msg.reason = $L('Reason: Entered password is incorrect.'); // i18n : New exception message when the supplied password is incorrect
+			break;
+		case NETWORK_ERROR.AUTHENTICATION_FAILURE:
+			msg.reason = $L('Reason: Authentication with access point failed.'); // i18n : New exception message of authentication failure
+			break;
+		case NETWORK_ERROR.LOGIN_FAILURE:
+			msg.reason = $L('Reason: Unable to login.'); // i18n : New exception message of login failure
+			break;
+		case NETWORK_ERROR.CONNECTION_ESTABLISHMENT_FAILURE:
+			msg.reason = $L('Reason: Could not establish a connection to access point.'); // i18n : New exception message of no internet connection
+			break;
+		case NETWORK_ERROR.INVALID_IP_ADDRESS:
+			msg.reason = $L('Reason: Could not retrieve a valid IP address by using DHCP.'); // i18n : DHCP means dynamic host configuration protocol
+			break;
+		case NETWORK_ERROR.PINCODE_ERROR:
+			msg.reason = $L('Reason: PIN is missing.'); // i18n : New exception message of wrong PIN code
+			break;
+		case NETWORK_ERROR.OUT_OF_RAGE:
+			msg.reason = $L('Reason: The network you selected is out of range.'); // i18n : New exception message of network out of range
+			break;
+		case NETWORK_ERROR.NETWORK_NOT_FOUND: // Error message: 'Network not found'
+			msg.reason = $L('Could not fined available network.'); // i18n : New exception message of network out of range
+			break;
+		case NETWORK_ERROR.WIFI_TECHNOLOGY_UNAVAILABLE: // 'WiFi technology unavailable'
+			msg.reason = $L('Wi-Fi error occurred.'); // i18n : New exception message of network out of range
+			break;
+		default:
+			msg.reason = $L('Please check the network name and password and try again.');
+			break;
+	}
+	return msg;
+}
diff --git a/src/services/utils/networkUtils.js b/src/services/utils/networkUtils.js
new file mode 100644
index 0000000..66cf5ac
--- /dev/null
+++ b/src/services/utils/networkUtils.js
@@ -0,0 +1,95 @@
+export function isValidSSID (ssid) {
+	return (typeof ssid === 'string' && (ssid.length >= 1) && (ssid.length <= 32));
+}
+
+export function isValidPassKey (type, key) {
+	let asciiPattern = new RegExp('^[\x00-\x7F]*$'),
+		hexPattern = new RegExp('^[A-Fa-f0-9]*$');
+
+	if (type === 'none') {
+		return true;
+	} else if (type === 'wep') {
+		if ([5, 13].includes(key.length)) { // 40-bit or 104-bit ASCII
+			return asciiPattern.test(key);
+		} else if ([10, 26].includes(key.length)) { // 40-bit or 104-bit HEX
+			return hexPattern.test(key);
+		}
+	} else if (['wpa-personal', 'psk'].includes(type)) {
+		return (key.length >= 8 && key.length <= 63) ||
+				(key.length === 64 && hexPattern.test(key));
+	} else if (type === 'wapi-psk') {
+		return ((hexPattern.test(key) && key.length > 0 && !(key.length % 2)) ||
+			(8 <= key.length && 63 >= key.length));
+	}
+	return (type === 'none');
+}
+
+export const regExps = {
+	ipv4: new RegExp('^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'),
+	subnetMask: new RegExp('^(((128|192|224|240|248|252|254)\\.0\\.0\\.0)|(255\\.(0|128|192|224|240|248|252|254)\\.0\\.0)|(255\\.255\\.(0|128|192|224|240|248|252|254)\\.0)|(255\\.255\\.255\\.(0|128|192|224|240|248|252|254|255)))$'),
+	ipv6: new RegExp('^(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|::(ffff(:0{1,4}){0,1}:){0,1}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$'),
+	subnetPrefixLength: new RegExp('^([1-9]|[1-9][0-9]|1[0-1][0-9]|12[0-7])$')
+};
+
+export function getDNSs (info, mode) {
+	let i, dns, dnss = [];
+	const reg = regExps[mode];
+	const maxCount = 16;
+	if (reg) {
+		for (i = 1; i <= maxCount; i++) {
+			dns = info['dns' + i];
+			if (reg.test(dns) === true) {
+				dnss.push(dns);
+			}
+		}
+	}
+
+	return dnss;
+}
+
+export function getIpInformation (info, mode, supportIPv6) {
+	let dnss = [];
+	const ipInformation = {ipv6: false, method: '', ipAddress: '', subnet: '', gateway: '', dns: ''};
+
+	if (!info) {
+		return ipInformation;
+	}
+
+	if ((mode !== 'ipv4') && (mode !== 'ipv6')) {
+		mode = (supportIPv6 && (info.ipv6)) ? 'ipv6' : 'ipv4';
+	}
+
+	if (mode === 'ipv6') {
+		ipInformation.ipv6 = true;
+		if (info.ipv6) {
+			ipInformation.method = info.ipv6.method;
+			ipInformation.ipAddress = info.ipv6.ipAddress;	// e.g. 'fd89:ae1e:9544:1:d82a:7c1d:f69b:4300'
+			ipInformation.subnet = info.ipv6.prefixLength;
+			ipInformation.gateway = info.ipv6.gateway;
+
+			if (!Array.isArray(ipInformation.subnet) &&
+					(ipInformation.subnet - parseFloat(ipInformation.subnet) + 1) >= 0) {
+				ipInformation.subnet = ipInformation.subnet.toString();
+			}
+		}
+	} else		/*	if(mode == "ipv4")*/ {
+		ipInformation.ipv6 = false;
+		ipInformation.method = info.method;
+		ipInformation.ipAddress = info.ipAddress;
+		ipInformation.subnet = info.netmask;
+		ipInformation.gateway = info.gateway;
+	}
+
+	// find dns address
+	ipInformation.dns = '';
+	dnss = getDNSs(info, mode);
+	if (dnss.length > 0) {
+		ipInformation.dns = dnss[0];
+	}
+
+	if (ipInformation.method === 'auto')	{
+		ipInformation.method = 'dhcp';	// ipv4 : 'dhcp' or 'manual', ipv6 : 'auto' or 'manual'
+	}
+
+	return ipInformation;
+}
diff --git a/src/services/utils/profileErrors.js b/src/services/utils/profileErrors.js
new file mode 100644
index 0000000..7c529a5
--- /dev/null
+++ b/src/services/utils/profileErrors.js
@@ -0,0 +1,71 @@
+import $L from '@enact/i18n/$L';
+
+export const PROFILE_ERROR = {
+	INVALID_NAME: 100,
+	INVALID_AVATARURL: 101,
+	INVALID_FIRSTNAME: 102,
+	INVALID_LASTNAME: 103,
+	INVALID_PHONENUM: 104,
+	INVALID_AGETYPE: 105,
+
+	INVALID_COUNTRY: 106,
+	INVALID_ZIPCODE: 107,
+	INVALID_STATE: 108,
+	INVALID_CITY: 109,
+	INVALID_ADDRESSLINE1: 110,
+	INVALID_ADDRESSLINE2: 111,
+};
+// 'name', 'firstName', 'lastName', 'phoneNum', 'ageType', 'country', 'zipCode, 'state', 'city', 'addressLine1', 'addressLine2',
+
+export function findMsgByErrorCode (code, message) {
+	const msg = {
+		code,
+		message: $L('Unable to create new profile.'),
+		reason: '',
+		suggestion: $L('Please check the form and try again')
+	};
+	switch (code) {
+		case PROFILE_ERROR.INVALID_AVATARURL:
+			msg.reason = $L('Invalid avatar. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_NAME:
+			msg.reason = $L('Invalid display name. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_FIRSTNAME:
+			msg.reason = $L('Invalid first name. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_LASTNAME:
+			msg.reason = $L('Invalid last name. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_PHONENUM:
+			msg.reason = $L('Invalid phone num. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_AGETYPE:
+			msg.reason = $L('Invalid age type. This field cannot be empty.');
+			break;
+
+		case PROFILE_ERROR.INVALID_COUNTRY:
+			msg.reason = $L('Invalid country. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_ZIPCODE:
+			msg.reason = $L('Invalid zip code. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_STATE:
+			msg.reason = $L('Invalid state. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_CITY:
+			msg.reason = $L('Invalid city. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_ADDRESSLINE1:
+			msg.reason = $L('Invalid street address1. This field cannot be empty.');
+			break;
+		case PROFILE_ERROR.INVALID_ADDRESSLINE2:
+			msg.reason = $L('Invalid street address2. This field cannot be empty.');
+			break;
+		default:
+			msg.reason = message;
+			break;
+	}
+	msg.reason = msg.reason;
+	return msg;
+}
-- 
2.17.1

