From c652aacc5e7600006adc9095fffc7b49be45d862 Mon Sep 17 00:00:00 2001
From: "sameer.mulla" <sameer.mulla@lge.com>
Date: Tue, 4 Feb 2020 20:28:59 +0530
Subject: [PATCH] Support enabling avdtp delayReport

:Release Notes:
Support enabling avdtp delayReport

:Detailed Notes:
Support enabling avdtp delayReport

:Testing Performed:
Builded and Tested

:QA Notes:
NA

:Issues Addressed:
[PLAT-98273] Implement AVDTP delay report interface

Upstream Status: Pending
---
 profiles/audio/a2dp.c  |  8 +++++++
 profiles/audio/a2dp.h  |  1 +
 profiles/audio/avdtp.c |  5 +++++
 profiles/audio/avdtp.h |  1 +
 profiles/audio/media.c | 21 +++++++++++++++++++
 profiles/audio/media.h |  3 +++
 src/adapter.c          | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++
 src/adapter.h          |  3 +++
 src/hcid.h             |  1 +
 src/main.c             | 11 ++++++++++
 src/main.conf          |  3 +++
 11 files changed, 114 insertions(+)

diff --git a/profiles/audio/a2dp.c b/profiles/audio/a2dp.c
index fc98bb2..79ee207 100644
--- a/profiles/audio/a2dp.c
+++ b/profiles/audio/a2dp.c
@@ -1438,6 +1438,14 @@ found:
 	return avdtp_ref(chan->session);
 }
 
+void a2dp_sep_set_delay_reporting(struct a2dp_sep *sep, bool delay_reporting)
+{
+	DBG("");
+	DBG("delay_reporting %d",delay_reporting);
+	sep->delay_reporting = delay_reporting;
+	avdtp_local_sep_set_delay_report(sep->lsep, delay_reporting);
+}
+
 static void connect_cb(GIOChannel *io, GError *err, gpointer user_data)
 {
 	struct a2dp_channel *chan = user_data;
diff --git a/profiles/audio/a2dp.h b/profiles/audio/a2dp.h
index 2c388bb..4b386ce 100644
--- a/profiles/audio/a2dp.h
+++ b/profiles/audio/a2dp.h
@@ -91,3 +91,4 @@ gboolean a2dp_sep_unlock(struct a2dp_sep *sep, struct avdtp *session);
 struct avdtp_stream *a2dp_sep_get_stream(struct a2dp_sep *sep);
 struct btd_device *a2dp_setup_get_device(struct a2dp_setup *setup);
 struct avdtp *a2dp_avdtp_get(struct btd_device *device);
+void a2dp_sep_set_delay_reporting(struct a2dp_sep *sep, bool delay_reporting);
diff --git a/profiles/audio/avdtp.c b/profiles/audio/avdtp.c
index 2cb3c8a..8c262ff 100644
--- a/profiles/audio/avdtp.c
+++ b/profiles/audio/avdtp.c
@@ -475,6 +475,11 @@ static gboolean try_send(int sk, void *data, size_t len)
 	return TRUE;
 }
 
+void avdtp_local_sep_set_delay_report(struct avdtp_local_sep *lsep, bool delay_reporting)
+{
+	lsep->delay_reporting = delay_reporting;
+}
+
 static gboolean avdtp_send(struct avdtp *session, uint8_t transaction,
 				uint8_t message_type, uint8_t signal_id,
 				void *data, size_t len)
diff --git a/profiles/audio/avdtp.h b/profiles/audio/avdtp.h
index 621a6e3..ba270cd 100644
--- a/profiles/audio/avdtp.h
+++ b/profiles/audio/avdtp.h
@@ -300,3 +300,4 @@ struct avdtp_server *avdtp_get_server(struct avdtp_local_sep *lsep);
 
 struct avdtp *avdtp_new(GIOChannel *chan, struct btd_device *device,
 							struct queue *lseps);
+void avdtp_local_sep_set_delay_report(struct avdtp_local_sep *lsep, bool delay_reporting);
diff --git a/profiles/audio/media.c b/profiles/audio/media.c
index 1859bc1..af476ca 100644
--- a/profiles/audio/media.c
+++ b/profiles/audio/media.c
@@ -117,6 +117,19 @@ struct media_player {
 
 static GSList *adapters = NULL;
 
+void media_set_delay_reporting(struct media_adapter *media_adapter, bool delay_reporting)
+{
+	GSList *l;
+	for (l = media_adapter->endpoints; l; l = l->next) {
+		struct media_endpoint *endpoint = l->data;
+
+		if ((strcasecmp(endpoint->uuid, "0000110a-0000-1000-8000-00805f9b34fb") == 0) || (strcasecmp(endpoint->uuid, "0000110b-0000-1000-8000-00805f9b34fb") == 0))
+		{
+			a2dp_sep_set_delay_reporting(endpoint->sep, delay_reporting);
+		}
+	}
+}
+
 static void endpoint_request_free(struct endpoint_request *request)
 {
 	if (request->call)
@@ -416,6 +429,7 @@ static gboolean set_configuration(struct media_endpoint *endpoint,
 					void *user_data,
 					GDestroyNotify destroy)
 {
+	DBG("");
 	struct a2dp_config_data *data = user_data;
 	struct btd_device *device = a2dp_setup_get_device(data->setup);
 	DBusConnection *conn = btd_get_dbus_connection();
@@ -727,6 +741,7 @@ static struct media_endpoint *media_endpoint_create(struct media_adapter *adapte
 						int size,
 						int *err)
 {
+	DBG("");
 	struct media_endpoint *endpoint;
 	gboolean succeeded;
 
@@ -744,6 +759,10 @@ static struct media_endpoint *media_endpoint_create(struct media_adapter *adapte
 
 	endpoint->adapter = adapter;
 
+	delay_reporting = btd_adapter_get_delay_reporting(adapter->btd_adapter);
+
+	DBG("delay_reporting %d", delay_reporting);
+
 	if (strcasecmp(uuid, A2DP_SOURCE_UUID) == 0)
 		succeeded = endpoint_init_a2dp_source(endpoint,
 							delay_reporting, err);
@@ -1908,6 +1927,8 @@ int media_register(struct btd_adapter *btd_adapter)
 		return -1;
 	}
 
+	set_media_adapter(btd_adapter, adapter);
+
 	adapters = g_slist_append(adapters, adapter);
 
 	return 0;
diff --git a/profiles/audio/media.h b/profiles/audio/media.h
index dd630d4..48684df 100644
--- a/profiles/audio/media.h
+++ b/profiles/audio/media.h
@@ -23,6 +23,7 @@
  */
 
 struct media_endpoint;
+struct media_adapter;
 
 typedef void (*media_endpoint_cb_t) (struct media_endpoint *endpoint,
 					void *ret, int size, void *user_data);
@@ -33,3 +34,5 @@ void media_unregister(struct btd_adapter *btd_adapter);
 struct a2dp_sep *media_endpoint_get_sep(struct media_endpoint *endpoint);
 const char *media_endpoint_get_uuid(struct media_endpoint *endpoint);
 uint8_t media_endpoint_get_codec(struct media_endpoint *endpoint);
+void media_set_delay_reporting(struct media_adapter* adapter, bool delay_reporting);
+
diff --git a/src/adapter.c b/src/adapter.c
index 822bd34..79783c5 100644
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -77,6 +77,7 @@
 #include "gatt-database.h"
 #include "advertising.h"
 #include "eir.h"
+#include "profiles/audio/media.h"
 
 #define ADAPTER_INTERFACE	"org.bluez.Adapter1"
 
@@ -218,6 +219,10 @@ struct btd_adapter {
 	bool filtered_discoverable;	/* we are doing filtered discovery */
 	bool no_scan_restart_delay;	/* when this flag is set, restart scan
 					 * without delay */
+	bool delay_report;
+
+	struct media_adapter *media_adapter;
+
 	uint8_t discovery_type;		/* current active discovery type */
 	uint8_t discovery_enable;	/* discovery enabled/disabled */
 	bool discovery_suspended;	/* discovery has been suspended */
@@ -275,6 +280,11 @@ typedef enum {
 	ADAPTER_AUTHORIZE_CHECK_CONNECTED
 } adapter_authorize_type;
 
+void set_media_adapter(struct btd_adapter *adapter, struct media_adapter *media_adapter)
+{
+	adapter->media_adapter = media_adapter;
+}
+
 static struct btd_adapter *btd_adapter_lookup(uint16_t index)
 {
 	GList *list;
@@ -456,6 +466,7 @@ uint8_t btd_adapter_get_address_type(struct btd_adapter *adapter)
 
 static void store_adapter_info(struct btd_adapter *adapter)
 {
+	DBG("");
 	GKeyFile *key_file;
 	char filename[PATH_MAX];
 	char *str;
@@ -477,6 +488,9 @@ static void store_adapter_info(struct btd_adapter *adapter)
 	g_key_file_set_boolean(key_file, "General", "Discoverable",
 							discoverable);
 
+	g_key_file_set_boolean(key_file, "General", "DelayReport",
+							adapter->delay_report);
+
 	if (adapter->discoverable_timeout != main_opts.discovto)
 		g_key_file_set_integer(key_file, "General",
 					"DiscoverableTimeout",
@@ -3136,6 +3150,31 @@ static gboolean property_get_modalias(const GDBusPropertyTable *property,
 	return TRUE;
 }
 
+static gboolean property_get_delay_report_feature(const GDBusPropertyTable *property, DBusMessageIter *iter, void *user_data)
+{
+	struct btd_adapter *adapter = user_data;
+	dbus_bool_t delayReportingFeature = adapter->delay_report;
+
+	dbus_message_iter_append_basic(iter, DBUS_TYPE_BOOLEAN, &delayReportingFeature);
+
+	return TRUE;
+}
+
+static void property_set_delay_report_feature(const GDBusPropertyTable *property, DBusMessageIter *iter, GDBusPendingPropertySet id, void *user_data)
+{
+	struct btd_adapter *adapter = user_data;
+	dbus_bool_t enable;
+	dbus_message_iter_get_basic(iter, &enable);
+
+	DBG("DelayReport %d", enable);
+	g_dbus_pending_property_success(id);
+	adapter->delay_report = enable;
+	store_adapter_info(adapter);
+	media_set_delay_reporting(adapter->media_adapter, adapter->delay_report);
+	g_dbus_emit_property_changed(dbus_conn, adapter->path, ADAPTER_INTERFACE, "DelayReport");
+	return;
+}
+
 static int device_path_cmp(gconstpointer a, gconstpointer b)
 {
 	const struct btd_device *device = a;
@@ -3416,6 +3455,7 @@ static const GDBusPropertyTable adapter_properties[] = {
 	{ "UUIDs", "as", property_get_uuids },
 	{ "Modalias", "s", property_get_modalias, NULL,
 					property_exists_modalias },
+	{ "DelayReport", "b", property_get_delay_report_feature, property_set_delay_report_feature },
 	{ }
 };
 
@@ -4450,6 +4490,11 @@ bool btd_adapter_get_bredr(struct btd_adapter *adapter)
 	return false;
 }
 
+bool btd_adapter_get_delay_reporting(struct btd_adapter *adapter)
+{
+	return adapter->delay_report;
+}
+
 struct btd_gatt_database *btd_adapter_get_database(struct btd_adapter *adapter)
 {
 	if (!adapter)
@@ -5742,6 +5787,7 @@ static void fix_storage(struct btd_adapter *adapter)
 
 static void load_config(struct btd_adapter *adapter)
 {
+	DBG("");
 	GKeyFile *key_file;
 	char filename[PATH_MAX];
 	struct stat st;
@@ -5795,6 +5841,15 @@ static void load_config(struct btd_adapter *adapter)
 		gerr = NULL;
 	}
 
+	/* Get delay report */
+	adapter->delay_report = g_key_file_get_boolean(key_file,
+					"General", "DelayReport", &gerr);
+	if (gerr) {
+		adapter->delay_report = main_opts.delay_report;
+		g_error_free(gerr);
+		gerr = NULL;
+	}
+
 	g_key_file_free(key_file);
 }
 
@@ -5827,6 +5882,7 @@ static struct btd_adapter *btd_adapter_new(uint16_t index)
 						main_opts.did_version);
 	adapter->discoverable_timeout = main_opts.discovto;
 	adapter->pairable_timeout = main_opts.pairto;
+	adapter->delay_report = main_opts.delay_report;
 
 	DBG("System name: %s", adapter->system_name);
 	DBG("Major class: %u", adapter->major_class);
@@ -5834,6 +5890,7 @@ static struct btd_adapter *btd_adapter_new(uint16_t index)
 	DBG("Modalias: %s", adapter->modalias);
 	DBG("Discoverable timeout: %u seconds", adapter->discoverable_timeout);
 	DBG("Pairable timeout: %u seconds", adapter->pairable_timeout);
+	DBG("DelayReport %d", adapter->delay_report);
 
 	adapter->auths = g_queue_new();
 
diff --git a/src/adapter.h b/src/adapter.h
index d0a5253..9aafcd6 100644
--- a/src/adapter.h
+++ b/src/adapter.h
@@ -33,6 +33,7 @@
 
 struct btd_adapter;
 struct btd_device;
+struct media_adapter;
 
 struct btd_adapter *btd_adapter_get_default(void);
 bool btd_adapter_is_default(struct btd_adapter *adapter);
@@ -76,6 +77,8 @@ bool btd_adapter_get_powered(struct btd_adapter *adapter);
 bool btd_adapter_get_connectable(struct btd_adapter *adapter);
 bool btd_adapter_get_discoverable(struct btd_adapter *adapter);
 bool btd_adapter_get_bredr(struct btd_adapter *adapter);
+bool btd_adapter_get_delay_reporting(struct btd_adapter *adapter);
+void set_media_adapter(struct btd_adapter *adapter, struct media_adapter *media_adapter);
 
 struct btd_gatt_database *btd_adapter_get_database(struct btd_adapter *adapter);
 
diff --git a/src/hcid.h b/src/hcid.h
index 2c2b89d..b73d6c7 100644
--- a/src/hcid.h
+++ b/src/hcid.h
@@ -46,6 +46,7 @@ struct main_opts {
 	gboolean	name_resolv;
 	gboolean	debug_keys;
 	gboolean	fast_conn;
+	gboolean	delay_report;
 
 	uint16_t	did_source;
 	uint16_t	did_vendor;
diff --git a/src/main.c b/src/main.c
index 7e6af42..8836bf0 100644
--- a/src/main.c
+++ b/src/main.c
@@ -89,6 +89,7 @@ static const char *supported_options[] = {
 	"ControllerMode",
 	"MultiProfile",
 	"FastConnectable",
+	"DelayReport",
 	"Privacy",
 	NULL
 };
@@ -399,6 +400,16 @@ static void parse_config(GKeyFile *config)
 	else
 		main_opts.fast_conn = boolean;
 
+	boolean = g_key_file_get_boolean(config, "General",
+						"DelayReport", &err);
+	if (err)
+		g_clear_error(&err);
+	else
+	{
+		DBG("DelayReport=%d", boolean);
+		main_opts.delay_report = boolean;
+	}
+
 	str = g_key_file_get_string(config, "GATT", "Cache", &err);
 	if (err) {
 		g_clear_error(&err);
diff --git a/src/main.conf b/src/main.conf
index cbae32e..7dd16d3 100644
--- a/src/main.conf
+++ b/src/main.conf
@@ -58,6 +58,9 @@
 # 'false'.
 #FastConnectable = false
 
+# DelayReport will enable delay reporting
+DelayReport = true
+
 # Default privacy setting.
 # Enables use of private address.
 # Possible values: "off", "device", "network"
-- 
2.14.1

